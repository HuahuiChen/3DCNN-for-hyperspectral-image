!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddDatumVector	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddDatumVector(const vector<Datum>& datum_vector) {$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Datum>& datum_vector)
AddMatVector	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddMatVector(const vector<cv::Mat>& mat_vector,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<cv::Mat>& mat_vector, const vector<int>& labels)
Backward_cpu	absval_layer.cpp	/^void AbsValLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::BatchReindexLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	bias_layer.cpp	/^void BiasLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	bnll_layer.cpp	/^void BNLLLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	concat_layer.cpp	/^void ConcatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ContrastiveLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	crop_layer.cpp	/^void CropLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	dropout_layer.cpp	/^void DropoutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	elu_layer.cpp	/^void ELULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ELULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	embed_layer.cpp	/^void EmbedLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	exp_layer.cpp	/^void ExpLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	filter_layer.cpp	/^void FilterLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	flatten_layer.cpp	/^void FlattenLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	im2col_layer.cpp	/^void Im2colLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	log_layer.cpp	/^void LogLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	mvn_layer.cpp	/^void MVNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	pooling_layer.cpp	/^void PoolingLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	power_layer.cpp	/^void PowerLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	prelu_layer.cpp	/^void PReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	reduction_layer.cpp	/^void ReductionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	relu_layer.cpp	/^void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	scale_layer.cpp	/^void ScaleLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ScaleLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	silence_layer.cpp	/^void SilenceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SilenceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	slice_layer.cpp	/^void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxWithLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	split_layer.cpp	/^void SplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	spp_layer.cpp	/^void SPPLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	tanh_layer.cpp	/^void TanHLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	tile_layer.cpp	/^void TileLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TileLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
BaseDataLayer	base_data_layer.cpp	/^BaseDataLayer<Dtype>::BaseDataLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseDataLayer	signature:(const LayerParameter& param)
BasePrefetchingDataLayer	base_data_layer.cpp	/^BasePrefetchingDataLayer<Dtype>::BasePrefetchingDataLayer($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const LayerParameter& param)
CrossChannelBackward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelBackward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
CrossChannelForward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelForward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayer	data_layer.cpp	/^DataLayer<Dtype>::DataLayer(const LayerParameter& param)$/;"	f	class:caffe::DataLayer	signature:(const LayerParameter& param)
DataLayerSetUp	data_layer.cpp	/^void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerSetUp	image_data_layer.cpp	/^void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ImageDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerSetUp	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerSetUp	window_data_layer.cpp	/^void WindowDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WindowDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	absval_layer.cpp	/^void AbsValLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::AbsValLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AccuracyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	bias_layer.cpp	/^void BiasLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	bnll_layer.cpp	/^void BNLLLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	concat_layer.cpp	/^void ConcatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	crop_layer.cpp	/^void CropLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	dropout_layer.cpp	/^void DropoutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::EltwiseLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	elu_layer.cpp	/^void ELULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ELULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	embed_layer.cpp	/^void EmbedLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	exp_layer.cpp	/^void ExpLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	filter_layer.cpp	/^void FilterLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	flatten_layer.cpp	/^void FlattenLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	im2col_layer.cpp	/^void Im2colLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	log_layer.cpp	/^void LogLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	mvn_layer.cpp	/^void MVNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	pooling_layer.cpp	/^void PoolingLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	power_layer.cpp	/^void PowerLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	prelu_layer.cpp	/^void PReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	reduction_layer.cpp	/^void ReductionLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ReductionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	relu_layer.cpp	/^void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	scale_layer.cpp	/^void ScaleLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ScaleLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	slice_layer.cpp	/^void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	split_layer.cpp	/^void SplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	spp_layer.cpp	/^void SPPLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	tanh_layer.cpp	/^void TanHLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	threshold_layer.cpp	/^void ThresholdLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	tile_layer.cpp	/^void TileLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
GetPoolingParam	spp_layer.cpp	/^LayerParameter SPPLayer<Dtype>::GetPoolingParam(const int pyramid_level,$/;"	f	class:caffe::SPPLayer	signature:(const int pyramid_level, const int bottom_h, const int bottom_w, const SPPParameter spp_param)
INSTANTIATE_CLASS	absval_layer.cpp	/^INSTANTIATE_CLASS(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
INSTANTIATE_CLASS	accuracy_layer.cpp	/^INSTANTIATE_CLASS(AccuracyLayer);$/;"	p	namespace:caffe	file:	signature:(AccuracyLayer)
INSTANTIATE_CLASS	argmax_layer.cpp	/^INSTANTIATE_CLASS(ArgMaxLayer);$/;"	p	namespace:caffe	file:	signature:(ArgMaxLayer)
INSTANTIATE_CLASS	base_conv_layer.cpp	/^INSTANTIATE_CLASS(BaseConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(BaseConvolutionLayer)
INSTANTIATE_CLASS	base_data_layer.cpp	/^INSTANTIATE_CLASS(BaseDataLayer);$/;"	p	namespace:caffe	file:	signature:(BaseDataLayer)
INSTANTIATE_CLASS	base_data_layer.cpp	/^INSTANTIATE_CLASS(BasePrefetchingDataLayer);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer)
INSTANTIATE_CLASS	batch_norm_layer.cpp	/^INSTANTIATE_CLASS(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
INSTANTIATE_CLASS	batch_reindex_layer.cpp	/^INSTANTIATE_CLASS(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
INSTANTIATE_CLASS	bias_layer.cpp	/^INSTANTIATE_CLASS(BiasLayer);$/;"	p	namespace:caffe	file:	signature:(BiasLayer)
INSTANTIATE_CLASS	bnll_layer.cpp	/^INSTANTIATE_CLASS(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
INSTANTIATE_CLASS	concat_layer.cpp	/^INSTANTIATE_CLASS(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
INSTANTIATE_CLASS	contrastive_loss_layer.cpp	/^INSTANTIATE_CLASS(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
INSTANTIATE_CLASS	conv_layer.cpp	/^INSTANTIATE_CLASS(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
INSTANTIATE_CLASS	crop_layer.cpp	/^INSTANTIATE_CLASS(CropLayer);$/;"	p	namespace:caffe	file:	signature:(CropLayer)
INSTANTIATE_CLASS	data_layer.cpp	/^INSTANTIATE_CLASS(DataLayer);$/;"	p	namespace:caffe	file:	signature:(DataLayer)
INSTANTIATE_CLASS	deconv_layer.cpp	/^INSTANTIATE_CLASS(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
INSTANTIATE_CLASS	dropout_layer.cpp	/^INSTANTIATE_CLASS(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
INSTANTIATE_CLASS	dummy_data_layer.cpp	/^INSTANTIATE_CLASS(DummyDataLayer);$/;"	p	namespace:caffe	file:	signature:(DummyDataLayer)
INSTANTIATE_CLASS	eltwise_layer.cpp	/^INSTANTIATE_CLASS(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
INSTANTIATE_CLASS	elu_layer.cpp	/^INSTANTIATE_CLASS(ELULayer);$/;"	p	namespace:caffe	file:	signature:(ELULayer)
INSTANTIATE_CLASS	embed_layer.cpp	/^INSTANTIATE_CLASS(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
INSTANTIATE_CLASS	euclidean_loss_layer.cpp	/^INSTANTIATE_CLASS(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
INSTANTIATE_CLASS	exp_layer.cpp	/^INSTANTIATE_CLASS(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
INSTANTIATE_CLASS	filter_layer.cpp	/^INSTANTIATE_CLASS(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
INSTANTIATE_CLASS	flatten_layer.cpp	/^INSTANTIATE_CLASS(FlattenLayer);$/;"	p	namespace:caffe	file:	signature:(FlattenLayer)
INSTANTIATE_CLASS	hdf5_data_layer.cpp	/^INSTANTIATE_CLASS(HDF5DataLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer)
INSTANTIATE_CLASS	hdf5_output_layer.cpp	/^INSTANTIATE_CLASS(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
INSTANTIATE_CLASS	hinge_loss_layer.cpp	/^INSTANTIATE_CLASS(HingeLossLayer);$/;"	p	namespace:caffe	file:	signature:(HingeLossLayer)
INSTANTIATE_CLASS	im2col_layer.cpp	/^INSTANTIATE_CLASS(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
INSTANTIATE_CLASS	image_data_layer.cpp	/^INSTANTIATE_CLASS(ImageDataLayer);$/;"	p	namespace:caffe	file:	signature:(ImageDataLayer)
INSTANTIATE_CLASS	infogain_loss_layer.cpp	/^INSTANTIATE_CLASS(InfogainLossLayer);$/;"	p	namespace:caffe	file:	signature:(InfogainLossLayer)
INSTANTIATE_CLASS	inner_product_layer.cpp	/^INSTANTIATE_CLASS(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
INSTANTIATE_CLASS	input_layer.cpp	/^INSTANTIATE_CLASS(InputLayer);$/;"	p	namespace:caffe	file:	signature:(InputLayer)
INSTANTIATE_CLASS	log_layer.cpp	/^INSTANTIATE_CLASS(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
INSTANTIATE_CLASS	loss_layer.cpp	/^INSTANTIATE_CLASS(LossLayer);$/;"	p	namespace:caffe	file:	signature:(LossLayer)
INSTANTIATE_CLASS	lrn_layer.cpp	/^INSTANTIATE_CLASS(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
INSTANTIATE_CLASS	memory_data_layer.cpp	/^INSTANTIATE_CLASS(MemoryDataLayer);$/;"	p	namespace:caffe	file:	signature:(MemoryDataLayer)
INSTANTIATE_CLASS	multinomial_logistic_loss_layer.cpp	/^INSTANTIATE_CLASS(MultinomialLogisticLossLayer);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLossLayer)
INSTANTIATE_CLASS	mvn_layer.cpp	/^INSTANTIATE_CLASS(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
INSTANTIATE_CLASS	neuron_layer.cpp	/^INSTANTIATE_CLASS(NeuronLayer);$/;"	p	namespace:caffe	file:	signature:(NeuronLayer)
INSTANTIATE_CLASS	pooling_layer.cpp	/^INSTANTIATE_CLASS(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
INSTANTIATE_CLASS	power_layer.cpp	/^INSTANTIATE_CLASS(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
INSTANTIATE_CLASS	prelu_layer.cpp	/^INSTANTIATE_CLASS(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
INSTANTIATE_CLASS	reduction_layer.cpp	/^INSTANTIATE_CLASS(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
INSTANTIATE_CLASS	relu_layer.cpp	/^INSTANTIATE_CLASS(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
INSTANTIATE_CLASS	reshape_layer.cpp	/^INSTANTIATE_CLASS(ReshapeLayer);$/;"	p	namespace:caffe	file:	signature:(ReshapeLayer)
INSTANTIATE_CLASS	scale_layer.cpp	/^INSTANTIATE_CLASS(ScaleLayer);$/;"	p	namespace:caffe	file:	signature:(ScaleLayer)
INSTANTIATE_CLASS	sigmoid_cross_entropy_loss_layer.cpp	/^INSTANTIATE_CLASS(SigmoidCrossEntropyLossLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer)
INSTANTIATE_CLASS	sigmoid_layer.cpp	/^INSTANTIATE_CLASS(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
INSTANTIATE_CLASS	silence_layer.cpp	/^INSTANTIATE_CLASS(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
INSTANTIATE_CLASS	slice_layer.cpp	/^INSTANTIATE_CLASS(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
INSTANTIATE_CLASS	softmax_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
INSTANTIATE_CLASS	softmax_loss_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
INSTANTIATE_CLASS	split_layer.cpp	/^INSTANTIATE_CLASS(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
INSTANTIATE_CLASS	spp_layer.cpp	/^INSTANTIATE_CLASS(SPPLayer);$/;"	p	namespace:caffe	file:	signature:(SPPLayer)
INSTANTIATE_CLASS	tanh_layer.cpp	/^INSTANTIATE_CLASS(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
INSTANTIATE_CLASS	threshold_layer.cpp	/^INSTANTIATE_CLASS(ThresholdLayer);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer)
INSTANTIATE_CLASS	tile_layer.cpp	/^INSTANTIATE_CLASS(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
INSTANTIATE_CLASS	window_data_layer.cpp	/^INSTANTIATE_CLASS(WindowDataLayer);$/;"	p	namespace:caffe	file:	signature:(WindowDataLayer)
InternalThreadEntry	base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::BasePrefetchingDataLayer	signature:()
LayerSetUp	absval_layer.cpp	/^void AbsValLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	base_data_layer.cpp	/^void BaseDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	bias_layer.cpp	/^void BiasLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	concat_layer.cpp	/^void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	crop_layer.cpp	/^void CropLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	dropout_layer.cpp	/^void DropoutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	embed_layer.cpp	/^void EmbedLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	exp_layer.cpp	/^void ExpLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	filter_layer.cpp	/^void FilterLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	im2col_layer.cpp	/^void Im2colLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	input_layer.cpp	/^void InputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	log_layer.cpp	/^void LogLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	loss_layer.cpp	/^void LossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	lrn_layer.cpp	/^void LRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	pooling_layer.cpp	/^void PoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	power_layer.cpp	/^void PowerLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	prelu_layer.cpp	/^void PReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	reduction_layer.cpp	/^void ReductionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	reshape_layer.cpp	/^void ReshapeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	scale_layer.cpp	/^void ScaleLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	slice_layer.cpp	/^void SliceLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	spp_layer.cpp	/^void SPPLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	threshold_layer.cpp	/^void ThresholdLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LoadHDF5FileData	hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LoadHDF5FileData(const char* filename) {$/;"	f	class:caffe::HDF5DataLayer	signature:(const char* filename)
PrefetchRand	window_data_layer.cpp	/^unsigned int WindowDataLayer<Dtype>::PrefetchRand() {$/;"	f	class:caffe::WindowDataLayer	signature:()
REGISTER_LAYER_CLASS	absval_layer.cpp	/^REGISTER_LAYER_CLASS(AbsVal);$/;"	p	namespace:caffe	file:	signature:(AbsVal)
REGISTER_LAYER_CLASS	accuracy_layer.cpp	/^REGISTER_LAYER_CLASS(Accuracy);$/;"	p	namespace:caffe	file:	signature:(Accuracy)
REGISTER_LAYER_CLASS	argmax_layer.cpp	/^REGISTER_LAYER_CLASS(ArgMax);$/;"	p	namespace:caffe	file:	signature:(ArgMax)
REGISTER_LAYER_CLASS	batch_norm_layer.cpp	/^REGISTER_LAYER_CLASS(BatchNorm);$/;"	p	namespace:caffe	file:	signature:(BatchNorm)
REGISTER_LAYER_CLASS	batch_reindex_layer.cpp	/^REGISTER_LAYER_CLASS(BatchReindex);$/;"	p	namespace:caffe	file:	signature:(BatchReindex)
REGISTER_LAYER_CLASS	bias_layer.cpp	/^REGISTER_LAYER_CLASS(Bias);$/;"	p	namespace:caffe	file:	signature:(Bias)
REGISTER_LAYER_CLASS	bnll_layer.cpp	/^REGISTER_LAYER_CLASS(BNLL);$/;"	p	namespace:caffe	file:	signature:(BNLL)
REGISTER_LAYER_CLASS	concat_layer.cpp	/^REGISTER_LAYER_CLASS(Concat);$/;"	p	namespace:caffe	file:	signature:(Concat)
REGISTER_LAYER_CLASS	contrastive_loss_layer.cpp	/^REGISTER_LAYER_CLASS(ContrastiveLoss);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLoss)
REGISTER_LAYER_CLASS	crop_layer.cpp	/^REGISTER_LAYER_CLASS(Crop);$/;"	p	namespace:caffe	file:	signature:(Crop)
REGISTER_LAYER_CLASS	data_layer.cpp	/^REGISTER_LAYER_CLASS(Data);$/;"	p	namespace:caffe	file:	signature:(Data)
REGISTER_LAYER_CLASS	deconv_layer.cpp	/^REGISTER_LAYER_CLASS(Deconvolution);$/;"	p	namespace:caffe	file:	signature:(Deconvolution)
REGISTER_LAYER_CLASS	dropout_layer.cpp	/^REGISTER_LAYER_CLASS(Dropout);$/;"	p	namespace:caffe	file:	signature:(Dropout)
REGISTER_LAYER_CLASS	dummy_data_layer.cpp	/^REGISTER_LAYER_CLASS(DummyData);$/;"	p	namespace:caffe	file:	signature:(DummyData)
REGISTER_LAYER_CLASS	eltwise_layer.cpp	/^REGISTER_LAYER_CLASS(Eltwise);$/;"	p	namespace:caffe	file:	signature:(Eltwise)
REGISTER_LAYER_CLASS	elu_layer.cpp	/^REGISTER_LAYER_CLASS(ELU);$/;"	p	namespace:caffe	file:	signature:(ELU)
REGISTER_LAYER_CLASS	embed_layer.cpp	/^REGISTER_LAYER_CLASS(Embed);$/;"	p	namespace:caffe	file:	signature:(Embed)
REGISTER_LAYER_CLASS	euclidean_loss_layer.cpp	/^REGISTER_LAYER_CLASS(EuclideanLoss);$/;"	p	namespace:caffe	file:	signature:(EuclideanLoss)
REGISTER_LAYER_CLASS	exp_layer.cpp	/^REGISTER_LAYER_CLASS(Exp);$/;"	p	namespace:caffe	file:	signature:(Exp)
REGISTER_LAYER_CLASS	filter_layer.cpp	/^REGISTER_LAYER_CLASS(Filter);$/;"	p	namespace:caffe	file:	signature:(Filter)
REGISTER_LAYER_CLASS	flatten_layer.cpp	/^REGISTER_LAYER_CLASS(Flatten);$/;"	p	namespace:caffe	file:	signature:(Flatten)
REGISTER_LAYER_CLASS	hdf5_data_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Data);$/;"	p	namespace:caffe	file:	signature:(HDF5Data)
REGISTER_LAYER_CLASS	hdf5_output_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Output);$/;"	p	namespace:caffe	file:	signature:(HDF5Output)
REGISTER_LAYER_CLASS	hinge_loss_layer.cpp	/^REGISTER_LAYER_CLASS(HingeLoss);$/;"	p	namespace:caffe	file:	signature:(HingeLoss)
REGISTER_LAYER_CLASS	im2col_layer.cpp	/^REGISTER_LAYER_CLASS(Im2col);$/;"	p	namespace:caffe	file:	signature:(Im2col)
REGISTER_LAYER_CLASS	image_data_layer.cpp	/^REGISTER_LAYER_CLASS(ImageData);$/;"	p	namespace:caffe	file:	signature:(ImageData)
REGISTER_LAYER_CLASS	infogain_loss_layer.cpp	/^REGISTER_LAYER_CLASS(InfogainLoss);$/;"	p	namespace:caffe	file:	signature:(InfogainLoss)
REGISTER_LAYER_CLASS	inner_product_layer.cpp	/^REGISTER_LAYER_CLASS(InnerProduct);$/;"	p	namespace:caffe	file:	signature:(InnerProduct)
REGISTER_LAYER_CLASS	input_layer.cpp	/^REGISTER_LAYER_CLASS(Input);$/;"	p	namespace:caffe	file:	signature:(Input)
REGISTER_LAYER_CLASS	log_layer.cpp	/^REGISTER_LAYER_CLASS(Log);$/;"	p	namespace:caffe	file:	signature:(Log)
REGISTER_LAYER_CLASS	memory_data_layer.cpp	/^REGISTER_LAYER_CLASS(MemoryData);$/;"	p	namespace:caffe	file:	signature:(MemoryData)
REGISTER_LAYER_CLASS	multinomial_logistic_loss_layer.cpp	/^REGISTER_LAYER_CLASS(MultinomialLogisticLoss);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLoss)
REGISTER_LAYER_CLASS	mvn_layer.cpp	/^REGISTER_LAYER_CLASS(MVN);$/;"	p	namespace:caffe	file:	signature:(MVN)
REGISTER_LAYER_CLASS	power_layer.cpp	/^REGISTER_LAYER_CLASS(Power);$/;"	p	namespace:caffe	file:	signature:(Power)
REGISTER_LAYER_CLASS	prelu_layer.cpp	/^REGISTER_LAYER_CLASS(PReLU);$/;"	p	namespace:caffe	file:	signature:(PReLU)
REGISTER_LAYER_CLASS	reduction_layer.cpp	/^REGISTER_LAYER_CLASS(Reduction);$/;"	p	namespace:caffe	file:	signature:(Reduction)
REGISTER_LAYER_CLASS	reshape_layer.cpp	/^REGISTER_LAYER_CLASS(Reshape);$/;"	p	namespace:caffe	file:	signature:(Reshape)
REGISTER_LAYER_CLASS	scale_layer.cpp	/^REGISTER_LAYER_CLASS(Scale);$/;"	p	namespace:caffe	file:	signature:(Scale)
REGISTER_LAYER_CLASS	sigmoid_cross_entropy_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SigmoidCrossEntropyLoss);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLoss)
REGISTER_LAYER_CLASS	silence_layer.cpp	/^REGISTER_LAYER_CLASS(Silence);$/;"	p	namespace:caffe	file:	signature:(Silence)
REGISTER_LAYER_CLASS	slice_layer.cpp	/^REGISTER_LAYER_CLASS(Slice);$/;"	p	namespace:caffe	file:	signature:(Slice)
REGISTER_LAYER_CLASS	softmax_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SoftmaxWithLoss);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLoss)
REGISTER_LAYER_CLASS	split_layer.cpp	/^REGISTER_LAYER_CLASS(Split);$/;"	p	namespace:caffe	file:	signature:(Split)
REGISTER_LAYER_CLASS	spp_layer.cpp	/^REGISTER_LAYER_CLASS(SPP);$/;"	p	namespace:caffe	file:	signature:(SPP)
REGISTER_LAYER_CLASS	threshold_layer.cpp	/^REGISTER_LAYER_CLASS(Threshold);$/;"	p	namespace:caffe	file:	signature:(Threshold)
REGISTER_LAYER_CLASS	tile_layer.cpp	/^REGISTER_LAYER_CLASS(Tile);$/;"	p	namespace:caffe	file:	signature:(Tile)
REGISTER_LAYER_CLASS	window_data_layer.cpp	/^REGISTER_LAYER_CLASS(WindowData);$/;"	p	namespace:caffe	file:	signature:(WindowData)
Reset	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Reset(Dtype* data, Dtype* labels, int n) {$/;"	f	class:caffe::MemoryDataLayer	signature:(Dtype* data, Dtype* labels, int n)
Reshape	accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Reshape($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	bias_layer.cpp	/^void BiasLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	concat_layer.cpp	/^void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	crop_layer.cpp	/^void CropLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	dropout_layer.cpp	/^void DropoutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	embed_layer.cpp	/^void EmbedLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Reshape($/;"	f	class:caffe::EuclideanLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	filter_layer.cpp	/^void FilterLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	flatten_layer.cpp	/^void FlattenLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	im2col_layer.cpp	/^void Im2colLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Reshape($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	loss_layer.cpp	/^void LossLayer<Dtype>::Reshape($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	lrn_layer.cpp	/^void LRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Reshape($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	mvn_layer.cpp	/^void MVNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	neuron_layer.cpp	/^void NeuronLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NeuronLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	pooling_layer.cpp	/^void PoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	prelu_layer.cpp	/^void PReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	reduction_layer.cpp	/^void ReductionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	reshape_layer.cpp	/^void ReshapeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	scale_layer.cpp	/^void ScaleLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	slice_layer.cpp	/^void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	split_layer.cpp	/^void SplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	spp_layer.cpp	/^void SPPLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	tile_layer.cpp	/^void TileLayer<Dtype>::Reshape($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
STUB_GPU	absval_layer.cpp	/^STUB_GPU(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
STUB_GPU	batch_norm_layer.cpp	/^STUB_GPU(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
STUB_GPU	batch_reindex_layer.cpp	/^STUB_GPU(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
STUB_GPU	bias_layer.cpp	/^STUB_GPU(BiasLayer);$/;"	p	namespace:caffe	file:	signature:(BiasLayer)
STUB_GPU	bnll_layer.cpp	/^STUB_GPU(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
STUB_GPU	concat_layer.cpp	/^STUB_GPU(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
STUB_GPU	contrastive_loss_layer.cpp	/^STUB_GPU(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
STUB_GPU	conv_layer.cpp	/^STUB_GPU(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
STUB_GPU	crop_layer.cpp	/^STUB_GPU(CropLayer);$/;"	p	namespace:caffe	file:	signature:(CropLayer)
STUB_GPU	deconv_layer.cpp	/^STUB_GPU(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
STUB_GPU	dropout_layer.cpp	/^STUB_GPU(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
STUB_GPU	eltwise_layer.cpp	/^STUB_GPU(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
STUB_GPU	elu_layer.cpp	/^STUB_GPU(ELULayer);$/;"	p	namespace:caffe	file:	signature:(ELULayer)
STUB_GPU	embed_layer.cpp	/^STUB_GPU(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
STUB_GPU	euclidean_loss_layer.cpp	/^STUB_GPU(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
STUB_GPU	exp_layer.cpp	/^STUB_GPU(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
STUB_GPU	filter_layer.cpp	/^STUB_GPU(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
STUB_GPU	hdf5_output_layer.cpp	/^STUB_GPU(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
STUB_GPU	im2col_layer.cpp	/^STUB_GPU(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
STUB_GPU	inner_product_layer.cpp	/^STUB_GPU(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
STUB_GPU	log_layer.cpp	/^STUB_GPU(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
STUB_GPU	lrn_layer.cpp	/^STUB_GPU(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
STUB_GPU	mvn_layer.cpp	/^STUB_GPU(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
STUB_GPU	pooling_layer.cpp	/^STUB_GPU(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
STUB_GPU	power_layer.cpp	/^STUB_GPU(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
STUB_GPU	prelu_layer.cpp	/^STUB_GPU(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
STUB_GPU	reduction_layer.cpp	/^STUB_GPU(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
STUB_GPU	relu_layer.cpp	/^STUB_GPU(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
STUB_GPU	scale_layer.cpp	/^STUB_GPU(ScaleLayer);$/;"	p	namespace:caffe	file:	signature:(ScaleLayer)
STUB_GPU	sigmoid_layer.cpp	/^STUB_GPU(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
STUB_GPU	silence_layer.cpp	/^STUB_GPU(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
STUB_GPU	slice_layer.cpp	/^STUB_GPU(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
STUB_GPU	softmax_layer.cpp	/^STUB_GPU(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
STUB_GPU	softmax_loss_layer.cpp	/^STUB_GPU(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
STUB_GPU	split_layer.cpp	/^STUB_GPU(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
STUB_GPU	tanh_layer.cpp	/^STUB_GPU(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
STUB_GPU	tile_layer.cpp	/^STUB_GPU(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
STUB_GPU_BACKWARD	lrn_layer.cpp	/^STUB_GPU_BACKWARD(LRNLayer, CrossChannelBackward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelBackward)
STUB_GPU_BACKWARD	sigmoid_cross_entropy_loss_layer.cpp	/^STUB_GPU_BACKWARD(SigmoidCrossEntropyLossLayer, Backward);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer, Backward)
STUB_GPU_FORWARD	base_data_layer.cpp	/^STUB_GPU_FORWARD(BasePrefetchingDataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer, Forward)
STUB_GPU_FORWARD	hdf5_data_layer.cpp	/^STUB_GPU_FORWARD(HDF5DataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer, Forward)
STUB_GPU_FORWARD	lrn_layer.cpp	/^STUB_GPU_FORWARD(LRNLayer, CrossChannelForward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelForward)
STUB_GPU_FORWARD	threshold_layer.cpp	/^STUB_GPU_FORWARD(ThresholdLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer, Forward)
SaveBlobs	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::SaveBlobs() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
ShuffleImages	image_data_layer.cpp	/^void ImageDataLayer<Dtype>::ShuffleImages() {$/;"	f	class:caffe::ImageDataLayer	signature:()
WithinChannelBackward	lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelBackward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
WithinChannelForward	lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelForward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
backward_cpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
backward_cpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
backward_gpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
backward_gpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
caffe	absval_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	base_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	base_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	bias_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	bnll_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	crop_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	deconv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	dropout_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	elu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	exp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	hdf5_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	input_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	log_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	prelu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	scale_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	silence_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	softmax_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	window_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe::AbsValLayer::Backward_cpu	absval_layer.cpp	/^void AbsValLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::AbsValLayer::Forward_cpu	absval_layer.cpp	/^void AbsValLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::AbsValLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AbsValLayer::LayerSetUp	absval_layer.cpp	/^void AbsValLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayer::Forward_cpu	accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AccuracyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayer::LayerSetUp	accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayer::Reshape	accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Reshape($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ArgMaxLayer::Forward_cpu	argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ArgMaxLayer::LayerSetUp	argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ArgMaxLayer::Reshape	argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BNLLLayer::Backward_cpu	bnll_layer.cpp	/^void BNLLLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BNLLLayer::Forward_cpu	bnll_layer.cpp	/^void BNLLLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BaseConvolutionLayer::LayerSetUp	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BaseConvolutionLayer::Reshape	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BaseConvolutionLayer::backward_cpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
caffe::BaseConvolutionLayer::backward_cpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
caffe::BaseConvolutionLayer::backward_gpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
caffe::BaseConvolutionLayer::backward_gpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
caffe::BaseConvolutionLayer::forward_cpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
caffe::BaseConvolutionLayer::forward_cpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
caffe::BaseConvolutionLayer::forward_gpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
caffe::BaseConvolutionLayer::forward_gpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
caffe::BaseConvolutionLayer::weight_cpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
caffe::BaseConvolutionLayer::weight_gpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
caffe::BaseDataLayer::BaseDataLayer	base_data_layer.cpp	/^BaseDataLayer<Dtype>::BaseDataLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseDataLayer	signature:(const LayerParameter& param)
caffe::BaseDataLayer::LayerSetUp	base_data_layer.cpp	/^void BaseDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BasePrefetchingDataLayer::BasePrefetchingDataLayer	base_data_layer.cpp	/^BasePrefetchingDataLayer<Dtype>::BasePrefetchingDataLayer($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const LayerParameter& param)
caffe::BasePrefetchingDataLayer::Forward_cpu	base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BasePrefetchingDataLayer::InternalThreadEntry	base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::BasePrefetchingDataLayer	signature:()
caffe::BasePrefetchingDataLayer::LayerSetUp	base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayer::Backward_cpu	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BatchNormLayer::Forward_cpu	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayer::LayerSetUp	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayer::Reshape	batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchReindexLayer::Backward_cpu	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::BatchReindexLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BatchReindexLayer::Forward_cpu	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchReindexLayer::Reshape	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchReindexLayer::check_batch_reindex	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::check_batch_reindex(int initial_num,$/;"	f	class:caffe::BatchReindexLayer	signature:(int initial_num, int final_num, const Dtype* ridx_data)
caffe::BiasLayer::Backward_cpu	bias_layer.cpp	/^void BiasLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BiasLayer::Forward_cpu	bias_layer.cpp	/^void BiasLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BiasLayer::LayerSetUp	bias_layer.cpp	/^void BiasLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BiasLayer::Reshape	bias_layer.cpp	/^void BiasLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConcatLayer::Backward_cpu	concat_layer.cpp	/^void ConcatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ConcatLayer::Forward_cpu	concat_layer.cpp	/^void ConcatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConcatLayer::LayerSetUp	concat_layer.cpp	/^void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConcatLayer::Reshape	concat_layer.cpp	/^void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ContrastiveLossLayer::Backward_cpu	contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ContrastiveLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ContrastiveLossLayer::Forward_cpu	contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ContrastiveLossLayer::LayerSetUp	contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConvolutionLayer::Backward_cpu	conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ConvolutionLayer::Forward_cpu	conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConvolutionLayer::compute_output_shape	conv_layer.cpp	/^void ConvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::ConvolutionLayer	signature:()
caffe::CropLayer::Backward_cpu	crop_layer.cpp	/^void CropLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::CropLayer::Forward_cpu	crop_layer.cpp	/^void CropLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CropLayer::LayerSetUp	crop_layer.cpp	/^void CropLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CropLayer::Reshape	crop_layer.cpp	/^void CropLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CropLayer::crop_copy	crop_layer.cpp	/^void CropLayer<Dtype>::crop_copy(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top, const vector<int>& offsets, vector<int> indices, int cur_dim, const Dtype* src_data, Dtype* dest_data, bool is_forward)
caffe::DataLayer::DataLayer	data_layer.cpp	/^DataLayer<Dtype>::DataLayer(const LayerParameter& param)$/;"	f	class:caffe::DataLayer	signature:(const LayerParameter& param)
caffe::DataLayer::DataLayerSetUp	data_layer.cpp	/^void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DataLayer::load_batch	data_layer.cpp	/^void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::DataLayer	signature:(Batch<Dtype>* batch)
caffe::DataLayer::~DataLayer	data_layer.cpp	/^DataLayer<Dtype>::~DataLayer() {$/;"	f	class:caffe::DataLayer	signature:()
caffe::DeconvolutionLayer::Backward_cpu	deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::DeconvolutionLayer::Forward_cpu	deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DeconvolutionLayer::compute_output_shape	deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::DeconvolutionLayer	signature:()
caffe::DropoutLayer::Backward_cpu	dropout_layer.cpp	/^void DropoutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::DropoutLayer::Forward_cpu	dropout_layer.cpp	/^void DropoutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DropoutLayer::LayerSetUp	dropout_layer.cpp	/^void DropoutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DropoutLayer::Reshape	dropout_layer.cpp	/^void DropoutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DummyDataLayer::Forward_cpu	dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DummyDataLayer::LayerSetUp	dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ELULayer::Backward_cpu	elu_layer.cpp	/^void ELULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ELULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ELULayer::Forward_cpu	elu_layer.cpp	/^void ELULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ELULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EltwiseLayer::Backward_cpu	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::EltwiseLayer::Forward_cpu	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::EltwiseLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EltwiseLayer::LayerSetUp	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EltwiseLayer::Reshape	eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EmbedLayer::Backward_cpu	embed_layer.cpp	/^void EmbedLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::EmbedLayer::Forward_cpu	embed_layer.cpp	/^void EmbedLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EmbedLayer::LayerSetUp	embed_layer.cpp	/^void EmbedLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EmbedLayer::Reshape	embed_layer.cpp	/^void EmbedLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EuclideanLossLayer::Backward_cpu	euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::EuclideanLossLayer::Forward_cpu	euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EuclideanLossLayer::Reshape	euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Reshape($/;"	f	class:caffe::EuclideanLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ExpLayer::Backward_cpu	exp_layer.cpp	/^void ExpLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ExpLayer::Forward_cpu	exp_layer.cpp	/^void ExpLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ExpLayer::LayerSetUp	exp_layer.cpp	/^void ExpLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FilterLayer::Backward_cpu	filter_layer.cpp	/^void FilterLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::FilterLayer::Forward_cpu	filter_layer.cpp	/^void FilterLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FilterLayer::LayerSetUp	filter_layer.cpp	/^void FilterLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FilterLayer::Reshape	filter_layer.cpp	/^void FilterLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FlattenLayer::Backward_cpu	flatten_layer.cpp	/^void FlattenLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::FlattenLayer::Forward_cpu	flatten_layer.cpp	/^void FlattenLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FlattenLayer::Reshape	flatten_layer.cpp	/^void FlattenLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5DataLayer::Forward_cpu	hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5DataLayer::LayerSetUp	hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5DataLayer::LoadHDF5FileData	hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LoadHDF5FileData(const char* filename) {$/;"	f	class:caffe::HDF5DataLayer	signature:(const char* filename)
caffe::HDF5DataLayer::~HDF5DataLayer	hdf5_data_layer.cpp	/^HDF5DataLayer<Dtype>::~HDF5DataLayer<Dtype>() { }$/;"	f	class:caffe::HDF5DataLayer	signature:()
caffe::HDF5OutputLayer::Backward_cpu	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::HDF5OutputLayer::Forward_cpu	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5OutputLayer::LayerSetUp	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5OutputLayer::SaveBlobs	hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::SaveBlobs() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
caffe::HDF5OutputLayer::~HDF5OutputLayer	hdf5_output_layer.cpp	/^HDF5OutputLayer<Dtype>::~HDF5OutputLayer<Dtype>() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
caffe::HingeLossLayer::Backward_cpu	hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::HingeLossLayer::Forward_cpu	hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::INSTANTIATE_CLASS	absval_layer.cpp	/^INSTANTIATE_CLASS(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
caffe::INSTANTIATE_CLASS	accuracy_layer.cpp	/^INSTANTIATE_CLASS(AccuracyLayer);$/;"	p	namespace:caffe	file:	signature:(AccuracyLayer)
caffe::INSTANTIATE_CLASS	argmax_layer.cpp	/^INSTANTIATE_CLASS(ArgMaxLayer);$/;"	p	namespace:caffe	file:	signature:(ArgMaxLayer)
caffe::INSTANTIATE_CLASS	base_conv_layer.cpp	/^INSTANTIATE_CLASS(BaseConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(BaseConvolutionLayer)
caffe::INSTANTIATE_CLASS	base_data_layer.cpp	/^INSTANTIATE_CLASS(BaseDataLayer);$/;"	p	namespace:caffe	file:	signature:(BaseDataLayer)
caffe::INSTANTIATE_CLASS	base_data_layer.cpp	/^INSTANTIATE_CLASS(BasePrefetchingDataLayer);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer)
caffe::INSTANTIATE_CLASS	batch_norm_layer.cpp	/^INSTANTIATE_CLASS(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
caffe::INSTANTIATE_CLASS	batch_reindex_layer.cpp	/^INSTANTIATE_CLASS(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
caffe::INSTANTIATE_CLASS	bias_layer.cpp	/^INSTANTIATE_CLASS(BiasLayer);$/;"	p	namespace:caffe	file:	signature:(BiasLayer)
caffe::INSTANTIATE_CLASS	bnll_layer.cpp	/^INSTANTIATE_CLASS(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
caffe::INSTANTIATE_CLASS	concat_layer.cpp	/^INSTANTIATE_CLASS(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
caffe::INSTANTIATE_CLASS	contrastive_loss_layer.cpp	/^INSTANTIATE_CLASS(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
caffe::INSTANTIATE_CLASS	conv_layer.cpp	/^INSTANTIATE_CLASS(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
caffe::INSTANTIATE_CLASS	crop_layer.cpp	/^INSTANTIATE_CLASS(CropLayer);$/;"	p	namespace:caffe	file:	signature:(CropLayer)
caffe::INSTANTIATE_CLASS	data_layer.cpp	/^INSTANTIATE_CLASS(DataLayer);$/;"	p	namespace:caffe	file:	signature:(DataLayer)
caffe::INSTANTIATE_CLASS	deconv_layer.cpp	/^INSTANTIATE_CLASS(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
caffe::INSTANTIATE_CLASS	dropout_layer.cpp	/^INSTANTIATE_CLASS(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
caffe::INSTANTIATE_CLASS	dummy_data_layer.cpp	/^INSTANTIATE_CLASS(DummyDataLayer);$/;"	p	namespace:caffe	file:	signature:(DummyDataLayer)
caffe::INSTANTIATE_CLASS	eltwise_layer.cpp	/^INSTANTIATE_CLASS(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
caffe::INSTANTIATE_CLASS	elu_layer.cpp	/^INSTANTIATE_CLASS(ELULayer);$/;"	p	namespace:caffe	file:	signature:(ELULayer)
caffe::INSTANTIATE_CLASS	embed_layer.cpp	/^INSTANTIATE_CLASS(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
caffe::INSTANTIATE_CLASS	euclidean_loss_layer.cpp	/^INSTANTIATE_CLASS(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
caffe::INSTANTIATE_CLASS	exp_layer.cpp	/^INSTANTIATE_CLASS(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
caffe::INSTANTIATE_CLASS	filter_layer.cpp	/^INSTANTIATE_CLASS(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
caffe::INSTANTIATE_CLASS	flatten_layer.cpp	/^INSTANTIATE_CLASS(FlattenLayer);$/;"	p	namespace:caffe	file:	signature:(FlattenLayer)
caffe::INSTANTIATE_CLASS	hdf5_data_layer.cpp	/^INSTANTIATE_CLASS(HDF5DataLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer)
caffe::INSTANTIATE_CLASS	hdf5_output_layer.cpp	/^INSTANTIATE_CLASS(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
caffe::INSTANTIATE_CLASS	hinge_loss_layer.cpp	/^INSTANTIATE_CLASS(HingeLossLayer);$/;"	p	namespace:caffe	file:	signature:(HingeLossLayer)
caffe::INSTANTIATE_CLASS	im2col_layer.cpp	/^INSTANTIATE_CLASS(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
caffe::INSTANTIATE_CLASS	image_data_layer.cpp	/^INSTANTIATE_CLASS(ImageDataLayer);$/;"	p	namespace:caffe	file:	signature:(ImageDataLayer)
caffe::INSTANTIATE_CLASS	infogain_loss_layer.cpp	/^INSTANTIATE_CLASS(InfogainLossLayer);$/;"	p	namespace:caffe	file:	signature:(InfogainLossLayer)
caffe::INSTANTIATE_CLASS	inner_product_layer.cpp	/^INSTANTIATE_CLASS(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
caffe::INSTANTIATE_CLASS	input_layer.cpp	/^INSTANTIATE_CLASS(InputLayer);$/;"	p	namespace:caffe	file:	signature:(InputLayer)
caffe::INSTANTIATE_CLASS	log_layer.cpp	/^INSTANTIATE_CLASS(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
caffe::INSTANTIATE_CLASS	loss_layer.cpp	/^INSTANTIATE_CLASS(LossLayer);$/;"	p	namespace:caffe	file:	signature:(LossLayer)
caffe::INSTANTIATE_CLASS	lrn_layer.cpp	/^INSTANTIATE_CLASS(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
caffe::INSTANTIATE_CLASS	memory_data_layer.cpp	/^INSTANTIATE_CLASS(MemoryDataLayer);$/;"	p	namespace:caffe	file:	signature:(MemoryDataLayer)
caffe::INSTANTIATE_CLASS	multinomial_logistic_loss_layer.cpp	/^INSTANTIATE_CLASS(MultinomialLogisticLossLayer);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLossLayer)
caffe::INSTANTIATE_CLASS	mvn_layer.cpp	/^INSTANTIATE_CLASS(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
caffe::INSTANTIATE_CLASS	neuron_layer.cpp	/^INSTANTIATE_CLASS(NeuronLayer);$/;"	p	namespace:caffe	file:	signature:(NeuronLayer)
caffe::INSTANTIATE_CLASS	pooling_layer.cpp	/^INSTANTIATE_CLASS(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
caffe::INSTANTIATE_CLASS	power_layer.cpp	/^INSTANTIATE_CLASS(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
caffe::INSTANTIATE_CLASS	prelu_layer.cpp	/^INSTANTIATE_CLASS(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
caffe::INSTANTIATE_CLASS	reduction_layer.cpp	/^INSTANTIATE_CLASS(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
caffe::INSTANTIATE_CLASS	relu_layer.cpp	/^INSTANTIATE_CLASS(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
caffe::INSTANTIATE_CLASS	reshape_layer.cpp	/^INSTANTIATE_CLASS(ReshapeLayer);$/;"	p	namespace:caffe	file:	signature:(ReshapeLayer)
caffe::INSTANTIATE_CLASS	scale_layer.cpp	/^INSTANTIATE_CLASS(ScaleLayer);$/;"	p	namespace:caffe	file:	signature:(ScaleLayer)
caffe::INSTANTIATE_CLASS	sigmoid_cross_entropy_loss_layer.cpp	/^INSTANTIATE_CLASS(SigmoidCrossEntropyLossLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer)
caffe::INSTANTIATE_CLASS	sigmoid_layer.cpp	/^INSTANTIATE_CLASS(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
caffe::INSTANTIATE_CLASS	silence_layer.cpp	/^INSTANTIATE_CLASS(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
caffe::INSTANTIATE_CLASS	slice_layer.cpp	/^INSTANTIATE_CLASS(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
caffe::INSTANTIATE_CLASS	softmax_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
caffe::INSTANTIATE_CLASS	softmax_loss_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
caffe::INSTANTIATE_CLASS	split_layer.cpp	/^INSTANTIATE_CLASS(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
caffe::INSTANTIATE_CLASS	spp_layer.cpp	/^INSTANTIATE_CLASS(SPPLayer);$/;"	p	namespace:caffe	file:	signature:(SPPLayer)
caffe::INSTANTIATE_CLASS	tanh_layer.cpp	/^INSTANTIATE_CLASS(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
caffe::INSTANTIATE_CLASS	threshold_layer.cpp	/^INSTANTIATE_CLASS(ThresholdLayer);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer)
caffe::INSTANTIATE_CLASS	tile_layer.cpp	/^INSTANTIATE_CLASS(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
caffe::INSTANTIATE_CLASS	window_data_layer.cpp	/^INSTANTIATE_CLASS(WindowDataLayer);$/;"	p	namespace:caffe	file:	signature:(WindowDataLayer)
caffe::Im2colLayer::Backward_cpu	im2col_layer.cpp	/^void Im2colLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::Im2colLayer::Forward_cpu	im2col_layer.cpp	/^void Im2colLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::Im2colLayer::LayerSetUp	im2col_layer.cpp	/^void Im2colLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::Im2colLayer::Reshape	im2col_layer.cpp	/^void Im2colLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ImageDataLayer::DataLayerSetUp	image_data_layer.cpp	/^void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ImageDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ImageDataLayer::ShuffleImages	image_data_layer.cpp	/^void ImageDataLayer<Dtype>::ShuffleImages() {$/;"	f	class:caffe::ImageDataLayer	signature:()
caffe::ImageDataLayer::load_batch	image_data_layer.cpp	/^void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::ImageDataLayer	signature:(Batch<Dtype>* batch)
caffe::ImageDataLayer::~ImageDataLayer	image_data_layer.cpp	/^ImageDataLayer<Dtype>::~ImageDataLayer<Dtype>() {$/;"	f	class:caffe::ImageDataLayer	signature:()
caffe::InfogainLossLayer::Backward_cpu	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::InfogainLossLayer::Forward_cpu	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InfogainLossLayer::LayerSetUp	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InfogainLossLayer::Reshape	infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Reshape($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InnerProductLayer::Backward_cpu	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::InnerProductLayer::Forward_cpu	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InnerProductLayer::LayerSetUp	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InnerProductLayer::Reshape	inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InputLayer::LayerSetUp	input_layer.cpp	/^void InputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::Backward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LRNLayer::CrossChannelBackward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelBackward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LRNLayer::CrossChannelForward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelForward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::Forward_cpu	lrn_layer.cpp	/^void LRNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::LayerSetUp	lrn_layer.cpp	/^void LRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::Reshape	lrn_layer.cpp	/^void LRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::WithinChannelBackward	lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelBackward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LRNLayer::WithinChannelForward	lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelForward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LogLayer::Backward_cpu	log_layer.cpp	/^void LogLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LogLayer::Forward_cpu	log_layer.cpp	/^void LogLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LogLayer::LayerSetUp	log_layer.cpp	/^void LogLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LossLayer::LayerSetUp	loss_layer.cpp	/^void LossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LossLayer::Reshape	loss_layer.cpp	/^void LossLayer<Dtype>::Reshape($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MVNLayer::Backward_cpu	mvn_layer.cpp	/^void MVNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::MVNLayer::Forward_cpu	mvn_layer.cpp	/^void MVNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MVNLayer::Reshape	mvn_layer.cpp	/^void MVNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MemoryDataLayer::AddDatumVector	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddDatumVector(const vector<Datum>& datum_vector) {$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Datum>& datum_vector)
caffe::MemoryDataLayer::AddMatVector	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddMatVector(const vector<cv::Mat>& mat_vector,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<cv::Mat>& mat_vector, const vector<int>& labels)
caffe::MemoryDataLayer::DataLayerSetUp	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MemoryDataLayer::Forward_cpu	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MemoryDataLayer::Reset	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Reset(Dtype* data, Dtype* labels, int n) {$/;"	f	class:caffe::MemoryDataLayer	signature:(Dtype* data, Dtype* labels, int n)
caffe::MemoryDataLayer::set_batch_size	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::set_batch_size(int new_size) {$/;"	f	class:caffe::MemoryDataLayer	signature:(int new_size)
caffe::MultinomialLogisticLossLayer::Backward_cpu	multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::MultinomialLogisticLossLayer::Forward_cpu	multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MultinomialLogisticLossLayer::Reshape	multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Reshape($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::NeuronLayer::Reshape	neuron_layer.cpp	/^void NeuronLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NeuronLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PReLULayer::Backward_cpu	prelu_layer.cpp	/^void PReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::PReLULayer::Forward_cpu	prelu_layer.cpp	/^void PReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PReLULayer::LayerSetUp	prelu_layer.cpp	/^void PReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PReLULayer::Reshape	prelu_layer.cpp	/^void PReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PoolingLayer::Backward_cpu	pooling_layer.cpp	/^void PoolingLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::PoolingLayer::Forward_cpu	pooling_layer.cpp	/^void PoolingLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PoolingLayer::LayerSetUp	pooling_layer.cpp	/^void PoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PoolingLayer::Reshape	pooling_layer.cpp	/^void PoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PowerLayer::Backward_cpu	power_layer.cpp	/^void PowerLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::PowerLayer::Forward_cpu	power_layer.cpp	/^void PowerLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PowerLayer::LayerSetUp	power_layer.cpp	/^void PowerLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::REGISTER_LAYER_CLASS	absval_layer.cpp	/^REGISTER_LAYER_CLASS(AbsVal);$/;"	p	namespace:caffe	file:	signature:(AbsVal)
caffe::REGISTER_LAYER_CLASS	accuracy_layer.cpp	/^REGISTER_LAYER_CLASS(Accuracy);$/;"	p	namespace:caffe	file:	signature:(Accuracy)
caffe::REGISTER_LAYER_CLASS	argmax_layer.cpp	/^REGISTER_LAYER_CLASS(ArgMax);$/;"	p	namespace:caffe	file:	signature:(ArgMax)
caffe::REGISTER_LAYER_CLASS	batch_norm_layer.cpp	/^REGISTER_LAYER_CLASS(BatchNorm);$/;"	p	namespace:caffe	file:	signature:(BatchNorm)
caffe::REGISTER_LAYER_CLASS	batch_reindex_layer.cpp	/^REGISTER_LAYER_CLASS(BatchReindex);$/;"	p	namespace:caffe	file:	signature:(BatchReindex)
caffe::REGISTER_LAYER_CLASS	bias_layer.cpp	/^REGISTER_LAYER_CLASS(Bias);$/;"	p	namespace:caffe	file:	signature:(Bias)
caffe::REGISTER_LAYER_CLASS	bnll_layer.cpp	/^REGISTER_LAYER_CLASS(BNLL);$/;"	p	namespace:caffe	file:	signature:(BNLL)
caffe::REGISTER_LAYER_CLASS	concat_layer.cpp	/^REGISTER_LAYER_CLASS(Concat);$/;"	p	namespace:caffe	file:	signature:(Concat)
caffe::REGISTER_LAYER_CLASS	contrastive_loss_layer.cpp	/^REGISTER_LAYER_CLASS(ContrastiveLoss);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLoss)
caffe::REGISTER_LAYER_CLASS	crop_layer.cpp	/^REGISTER_LAYER_CLASS(Crop);$/;"	p	namespace:caffe	file:	signature:(Crop)
caffe::REGISTER_LAYER_CLASS	data_layer.cpp	/^REGISTER_LAYER_CLASS(Data);$/;"	p	namespace:caffe	file:	signature:(Data)
caffe::REGISTER_LAYER_CLASS	deconv_layer.cpp	/^REGISTER_LAYER_CLASS(Deconvolution);$/;"	p	namespace:caffe	file:	signature:(Deconvolution)
caffe::REGISTER_LAYER_CLASS	dropout_layer.cpp	/^REGISTER_LAYER_CLASS(Dropout);$/;"	p	namespace:caffe	file:	signature:(Dropout)
caffe::REGISTER_LAYER_CLASS	dummy_data_layer.cpp	/^REGISTER_LAYER_CLASS(DummyData);$/;"	p	namespace:caffe	file:	signature:(DummyData)
caffe::REGISTER_LAYER_CLASS	eltwise_layer.cpp	/^REGISTER_LAYER_CLASS(Eltwise);$/;"	p	namespace:caffe	file:	signature:(Eltwise)
caffe::REGISTER_LAYER_CLASS	elu_layer.cpp	/^REGISTER_LAYER_CLASS(ELU);$/;"	p	namespace:caffe	file:	signature:(ELU)
caffe::REGISTER_LAYER_CLASS	embed_layer.cpp	/^REGISTER_LAYER_CLASS(Embed);$/;"	p	namespace:caffe	file:	signature:(Embed)
caffe::REGISTER_LAYER_CLASS	euclidean_loss_layer.cpp	/^REGISTER_LAYER_CLASS(EuclideanLoss);$/;"	p	namespace:caffe	file:	signature:(EuclideanLoss)
caffe::REGISTER_LAYER_CLASS	exp_layer.cpp	/^REGISTER_LAYER_CLASS(Exp);$/;"	p	namespace:caffe	file:	signature:(Exp)
caffe::REGISTER_LAYER_CLASS	filter_layer.cpp	/^REGISTER_LAYER_CLASS(Filter);$/;"	p	namespace:caffe	file:	signature:(Filter)
caffe::REGISTER_LAYER_CLASS	flatten_layer.cpp	/^REGISTER_LAYER_CLASS(Flatten);$/;"	p	namespace:caffe	file:	signature:(Flatten)
caffe::REGISTER_LAYER_CLASS	hdf5_data_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Data);$/;"	p	namespace:caffe	file:	signature:(HDF5Data)
caffe::REGISTER_LAYER_CLASS	hdf5_output_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Output);$/;"	p	namespace:caffe	file:	signature:(HDF5Output)
caffe::REGISTER_LAYER_CLASS	hinge_loss_layer.cpp	/^REGISTER_LAYER_CLASS(HingeLoss);$/;"	p	namespace:caffe	file:	signature:(HingeLoss)
caffe::REGISTER_LAYER_CLASS	im2col_layer.cpp	/^REGISTER_LAYER_CLASS(Im2col);$/;"	p	namespace:caffe	file:	signature:(Im2col)
caffe::REGISTER_LAYER_CLASS	image_data_layer.cpp	/^REGISTER_LAYER_CLASS(ImageData);$/;"	p	namespace:caffe	file:	signature:(ImageData)
caffe::REGISTER_LAYER_CLASS	infogain_loss_layer.cpp	/^REGISTER_LAYER_CLASS(InfogainLoss);$/;"	p	namespace:caffe	file:	signature:(InfogainLoss)
caffe::REGISTER_LAYER_CLASS	inner_product_layer.cpp	/^REGISTER_LAYER_CLASS(InnerProduct);$/;"	p	namespace:caffe	file:	signature:(InnerProduct)
caffe::REGISTER_LAYER_CLASS	input_layer.cpp	/^REGISTER_LAYER_CLASS(Input);$/;"	p	namespace:caffe	file:	signature:(Input)
caffe::REGISTER_LAYER_CLASS	log_layer.cpp	/^REGISTER_LAYER_CLASS(Log);$/;"	p	namespace:caffe	file:	signature:(Log)
caffe::REGISTER_LAYER_CLASS	memory_data_layer.cpp	/^REGISTER_LAYER_CLASS(MemoryData);$/;"	p	namespace:caffe	file:	signature:(MemoryData)
caffe::REGISTER_LAYER_CLASS	multinomial_logistic_loss_layer.cpp	/^REGISTER_LAYER_CLASS(MultinomialLogisticLoss);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLoss)
caffe::REGISTER_LAYER_CLASS	mvn_layer.cpp	/^REGISTER_LAYER_CLASS(MVN);$/;"	p	namespace:caffe	file:	signature:(MVN)
caffe::REGISTER_LAYER_CLASS	power_layer.cpp	/^REGISTER_LAYER_CLASS(Power);$/;"	p	namespace:caffe	file:	signature:(Power)
caffe::REGISTER_LAYER_CLASS	prelu_layer.cpp	/^REGISTER_LAYER_CLASS(PReLU);$/;"	p	namespace:caffe	file:	signature:(PReLU)
caffe::REGISTER_LAYER_CLASS	reduction_layer.cpp	/^REGISTER_LAYER_CLASS(Reduction);$/;"	p	namespace:caffe	file:	signature:(Reduction)
caffe::REGISTER_LAYER_CLASS	reshape_layer.cpp	/^REGISTER_LAYER_CLASS(Reshape);$/;"	p	namespace:caffe	file:	signature:(Reshape)
caffe::REGISTER_LAYER_CLASS	scale_layer.cpp	/^REGISTER_LAYER_CLASS(Scale);$/;"	p	namespace:caffe	file:	signature:(Scale)
caffe::REGISTER_LAYER_CLASS	sigmoid_cross_entropy_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SigmoidCrossEntropyLoss);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLoss)
caffe::REGISTER_LAYER_CLASS	silence_layer.cpp	/^REGISTER_LAYER_CLASS(Silence);$/;"	p	namespace:caffe	file:	signature:(Silence)
caffe::REGISTER_LAYER_CLASS	slice_layer.cpp	/^REGISTER_LAYER_CLASS(Slice);$/;"	p	namespace:caffe	file:	signature:(Slice)
caffe::REGISTER_LAYER_CLASS	softmax_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SoftmaxWithLoss);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLoss)
caffe::REGISTER_LAYER_CLASS	split_layer.cpp	/^REGISTER_LAYER_CLASS(Split);$/;"	p	namespace:caffe	file:	signature:(Split)
caffe::REGISTER_LAYER_CLASS	spp_layer.cpp	/^REGISTER_LAYER_CLASS(SPP);$/;"	p	namespace:caffe	file:	signature:(SPP)
caffe::REGISTER_LAYER_CLASS	threshold_layer.cpp	/^REGISTER_LAYER_CLASS(Threshold);$/;"	p	namespace:caffe	file:	signature:(Threshold)
caffe::REGISTER_LAYER_CLASS	tile_layer.cpp	/^REGISTER_LAYER_CLASS(Tile);$/;"	p	namespace:caffe	file:	signature:(Tile)
caffe::REGISTER_LAYER_CLASS	window_data_layer.cpp	/^REGISTER_LAYER_CLASS(WindowData);$/;"	p	namespace:caffe	file:	signature:(WindowData)
caffe::ReLULayer::Backward_cpu	relu_layer.cpp	/^void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ReLULayer::Forward_cpu	relu_layer.cpp	/^void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReductionLayer::Backward_cpu	reduction_layer.cpp	/^void ReductionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ReductionLayer::Forward_cpu	reduction_layer.cpp	/^void ReductionLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ReductionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReductionLayer::LayerSetUp	reduction_layer.cpp	/^void ReductionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReductionLayer::Reshape	reduction_layer.cpp	/^void ReductionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReshapeLayer::LayerSetUp	reshape_layer.cpp	/^void ReshapeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReshapeLayer::Reshape	reshape_layer.cpp	/^void ReshapeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SPPLayer::Backward_cpu	spp_layer.cpp	/^void SPPLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SPPLayer::Forward_cpu	spp_layer.cpp	/^void SPPLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SPPLayer::GetPoolingParam	spp_layer.cpp	/^LayerParameter SPPLayer<Dtype>::GetPoolingParam(const int pyramid_level,$/;"	f	class:caffe::SPPLayer	signature:(const int pyramid_level, const int bottom_h, const int bottom_w, const SPPParameter spp_param)
caffe::SPPLayer::LayerSetUp	spp_layer.cpp	/^void SPPLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SPPLayer::Reshape	spp_layer.cpp	/^void SPPLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::STUB_GPU	absval_layer.cpp	/^STUB_GPU(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
caffe::STUB_GPU	batch_norm_layer.cpp	/^STUB_GPU(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
caffe::STUB_GPU	batch_reindex_layer.cpp	/^STUB_GPU(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
caffe::STUB_GPU	bias_layer.cpp	/^STUB_GPU(BiasLayer);$/;"	p	namespace:caffe	file:	signature:(BiasLayer)
caffe::STUB_GPU	bnll_layer.cpp	/^STUB_GPU(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
caffe::STUB_GPU	concat_layer.cpp	/^STUB_GPU(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
caffe::STUB_GPU	contrastive_loss_layer.cpp	/^STUB_GPU(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
caffe::STUB_GPU	conv_layer.cpp	/^STUB_GPU(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
caffe::STUB_GPU	crop_layer.cpp	/^STUB_GPU(CropLayer);$/;"	p	namespace:caffe	file:	signature:(CropLayer)
caffe::STUB_GPU	deconv_layer.cpp	/^STUB_GPU(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
caffe::STUB_GPU	dropout_layer.cpp	/^STUB_GPU(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
caffe::STUB_GPU	eltwise_layer.cpp	/^STUB_GPU(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
caffe::STUB_GPU	elu_layer.cpp	/^STUB_GPU(ELULayer);$/;"	p	namespace:caffe	file:	signature:(ELULayer)
caffe::STUB_GPU	embed_layer.cpp	/^STUB_GPU(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
caffe::STUB_GPU	euclidean_loss_layer.cpp	/^STUB_GPU(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
caffe::STUB_GPU	exp_layer.cpp	/^STUB_GPU(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
caffe::STUB_GPU	filter_layer.cpp	/^STUB_GPU(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
caffe::STUB_GPU	hdf5_output_layer.cpp	/^STUB_GPU(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
caffe::STUB_GPU	im2col_layer.cpp	/^STUB_GPU(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
caffe::STUB_GPU	inner_product_layer.cpp	/^STUB_GPU(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
caffe::STUB_GPU	log_layer.cpp	/^STUB_GPU(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
caffe::STUB_GPU	lrn_layer.cpp	/^STUB_GPU(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
caffe::STUB_GPU	mvn_layer.cpp	/^STUB_GPU(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
caffe::STUB_GPU	pooling_layer.cpp	/^STUB_GPU(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
caffe::STUB_GPU	power_layer.cpp	/^STUB_GPU(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
caffe::STUB_GPU	prelu_layer.cpp	/^STUB_GPU(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
caffe::STUB_GPU	reduction_layer.cpp	/^STUB_GPU(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
caffe::STUB_GPU	relu_layer.cpp	/^STUB_GPU(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
caffe::STUB_GPU	scale_layer.cpp	/^STUB_GPU(ScaleLayer);$/;"	p	namespace:caffe	file:	signature:(ScaleLayer)
caffe::STUB_GPU	sigmoid_layer.cpp	/^STUB_GPU(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
caffe::STUB_GPU	silence_layer.cpp	/^STUB_GPU(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
caffe::STUB_GPU	slice_layer.cpp	/^STUB_GPU(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
caffe::STUB_GPU	softmax_layer.cpp	/^STUB_GPU(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
caffe::STUB_GPU	softmax_loss_layer.cpp	/^STUB_GPU(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
caffe::STUB_GPU	split_layer.cpp	/^STUB_GPU(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
caffe::STUB_GPU	tanh_layer.cpp	/^STUB_GPU(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
caffe::STUB_GPU	tile_layer.cpp	/^STUB_GPU(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
caffe::STUB_GPU_BACKWARD	lrn_layer.cpp	/^STUB_GPU_BACKWARD(LRNLayer, CrossChannelBackward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelBackward)
caffe::STUB_GPU_BACKWARD	sigmoid_cross_entropy_loss_layer.cpp	/^STUB_GPU_BACKWARD(SigmoidCrossEntropyLossLayer, Backward);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer, Backward)
caffe::STUB_GPU_FORWARD	base_data_layer.cpp	/^STUB_GPU_FORWARD(BasePrefetchingDataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer, Forward)
caffe::STUB_GPU_FORWARD	hdf5_data_layer.cpp	/^STUB_GPU_FORWARD(HDF5DataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer, Forward)
caffe::STUB_GPU_FORWARD	lrn_layer.cpp	/^STUB_GPU_FORWARD(LRNLayer, CrossChannelForward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelForward)
caffe::STUB_GPU_FORWARD	threshold_layer.cpp	/^STUB_GPU_FORWARD(ThresholdLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer, Forward)
caffe::ScaleLayer::Backward_cpu	scale_layer.cpp	/^void ScaleLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ScaleLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ScaleLayer::Forward_cpu	scale_layer.cpp	/^void ScaleLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ScaleLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ScaleLayer::LayerSetUp	scale_layer.cpp	/^void ScaleLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ScaleLayer::Reshape	scale_layer.cpp	/^void ScaleLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidCrossEntropyLossLayer::Backward_cpu	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SigmoidCrossEntropyLossLayer::Forward_cpu	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidCrossEntropyLossLayer::LayerSetUp	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidCrossEntropyLossLayer::Reshape	sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidLayer::Backward_cpu	sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SigmoidLayer::Forward_cpu	sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SilenceLayer::Backward_cpu	silence_layer.cpp	/^void SilenceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SilenceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SliceLayer::Backward_cpu	slice_layer.cpp	/^void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SliceLayer::Forward_cpu	slice_layer.cpp	/^void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SliceLayer::LayerSetUp	slice_layer.cpp	/^void SliceLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SliceLayer::Reshape	slice_layer.cpp	/^void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxLayer::Backward_cpu	softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SoftmaxLayer::Forward_cpu	softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxLayer::Reshape	softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::Backward_cpu	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxWithLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SoftmaxWithLossLayer::Forward_cpu	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::LayerSetUp	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::Reshape	softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::get_normalizer	softmax_loss_layer.cpp	/^Dtype SoftmaxWithLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( LossParameter_NormalizationMode normalization_mode, int valid_count)
caffe::SplitLayer::Backward_cpu	split_layer.cpp	/^void SplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SplitLayer::Forward_cpu	split_layer.cpp	/^void SplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SplitLayer::Reshape	split_layer.cpp	/^void SplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::TanHLayer::Backward_cpu	tanh_layer.cpp	/^void TanHLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::TanHLayer::Forward_cpu	tanh_layer.cpp	/^void TanHLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ThresholdLayer::Forward_cpu	threshold_layer.cpp	/^void ThresholdLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ThresholdLayer::LayerSetUp	threshold_layer.cpp	/^void ThresholdLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::TileLayer::Backward_cpu	tile_layer.cpp	/^void TileLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TileLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::TileLayer::Forward_cpu	tile_layer.cpp	/^void TileLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::TileLayer::Reshape	tile_layer.cpp	/^void TileLayer<Dtype>::Reshape($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::WindowDataLayer::DataLayerSetUp	window_data_layer.cpp	/^void WindowDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WindowDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::WindowDataLayer::PrefetchRand	window_data_layer.cpp	/^unsigned int WindowDataLayer<Dtype>::PrefetchRand() {$/;"	f	class:caffe::WindowDataLayer	signature:()
caffe::WindowDataLayer::load_batch	window_data_layer.cpp	/^void WindowDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::WindowDataLayer	signature:(Batch<Dtype>* batch)
caffe::WindowDataLayer::~WindowDataLayer	window_data_layer.cpp	/^WindowDataLayer<Dtype>::~WindowDataLayer<Dtype>() {$/;"	f	class:caffe::WindowDataLayer	signature:()
caffe::kBNLL_THRESHOLD	bnll_layer.cpp	/^const float kBNLL_THRESHOLD = 50.;$/;"	m	namespace:caffe	file:
caffe::sigmoid	sigmoid_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe	signature:(Dtype x)
check_batch_reindex	batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::check_batch_reindex(int initial_num,$/;"	f	class:caffe::BatchReindexLayer	signature:(int initial_num, int final_num, const Dtype* ridx_data)
compute_output_shape	conv_layer.cpp	/^void ConvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::ConvolutionLayer	signature:()
compute_output_shape	deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::DeconvolutionLayer	signature:()
crop_copy	crop_layer.cpp	/^void CropLayer<Dtype>::crop_copy(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top, const vector<int>& offsets, vector<int> indices, int cur_dim, const Dtype* src_data, Dtype* dest_data, bool is_forward)
forward_cpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
forward_cpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
forward_gpu_bias	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
forward_gpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
get_normalizer	softmax_loss_layer.cpp	/^Dtype SoftmaxWithLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( LossParameter_NormalizationMode normalization_mode, int valid_count)
kBNLL_THRESHOLD	bnll_layer.cpp	/^const float kBNLL_THRESHOLD = 50.;$/;"	m	namespace:caffe	file:
load_batch	data_layer.cpp	/^void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::DataLayer	signature:(Batch<Dtype>* batch)
load_batch	image_data_layer.cpp	/^void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::ImageDataLayer	signature:(Batch<Dtype>* batch)
load_batch	window_data_layer.cpp	/^void WindowDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::WindowDataLayer	signature:(Batch<Dtype>* batch)
set_batch_size	memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::set_batch_size(int new_size) {$/;"	f	class:caffe::MemoryDataLayer	signature:(int new_size)
sigmoid	sigmoid_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe	signature:(Dtype x)
weight_cpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
weight_gpu_gemm	base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
~DataLayer	data_layer.cpp	/^DataLayer<Dtype>::~DataLayer() {$/;"	f	class:caffe::DataLayer	signature:()
~HDF5DataLayer	hdf5_data_layer.cpp	/^HDF5DataLayer<Dtype>::~HDF5DataLayer<Dtype>() { }$/;"	f	class:caffe::HDF5DataLayer	signature:()
~HDF5OutputLayer	hdf5_output_layer.cpp	/^HDF5OutputLayer<Dtype>::~HDF5OutputLayer<Dtype>() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
~ImageDataLayer	image_data_layer.cpp	/^ImageDataLayer<Dtype>::~ImageDataLayer<Dtype>() {$/;"	f	class:caffe::ImageDataLayer	signature:()
~WindowDataLayer	window_data_layer.cpp	/^WindowDataLayer<Dtype>::~WindowDataLayer<Dtype>() {$/;"	f	class:caffe::WindowDataLayer	signature:()
